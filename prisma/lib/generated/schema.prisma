generator client {
  provider = "prisma-client-js"
  output   = "lib/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String      @unique
  emailVerified Boolean     @default(false)
  image         String?
  role          String      @default("user") // for Better Auth admin plugin
  banned        Boolean     @default(false)
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  socialList    SocialList?
  blogs         Blog[]
  projects      Project[]

  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model SocialList {
  id       String  @id @default(uuid())
  userId   String  @unique
  github   String?
  facebook String?
  linkedIn String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}
